<?xml version="1.0" encoding="utf-8" ?>
<project name="skeleton_build" default="compile" 
  xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>
    A basic, skeleton build file for seam projects on JBoss
    Created by Jason Porter
  </description>

  <!-- 
        Build properties 

        These basically are properties that are needed to actually build the 
        project, such as directory locations 
  -->
  <property file="local.build.properties" />
  <property file="build.properties" /> 

  <!-- 
        Project Properties 

        These properties are specific to a project, like usernames, passewords,
        connection strings, etc
  -->
  <property file="local.project.properties" />
  <property file="project.properties" />

  <!--
        Build Lifecycle Tasks

        init 
          desc: setup for the build: taskdef, macrodef, groovy, conditions, etc
          lifecycle dependencies: none
          non-lifecycle dependencies: -retrieveIvy, -retrieveGroovy
        clean 
          desc: clean-up from a previous build
          lifecycle dependencies: none
          non-lifecycle dependencies: none
        processResources
          desc: copy resources, performing any needed replacements / filters
          lifecycle dependencies: none
          non-lifecycle dependencies: none
        processTestResources
          desc: same as processResources, but for test resources
          lifecycle dependencies: none
          non-lifecycle dependencies: none
        libs
          desc: fetch all needed libraries using Ivy
          lifecycle dependencies: init
          non-lifecycle dependencies: -retrieveLibs
        compile
          desc: compile groovy / Java code
          lifecycle dependencies: libs, processResources
          non-lifecycle dependencies: none
        compileTests
          desc: compile groovy / Java test code
          lifecycle dependencies: compile
          non-lifecycle dependencies: none
        test
          desc: run tests
          lifecycle dependencies: compileTests, processTestResources
          non-lifecycle dependencies: none
        test-coverage
          desc: Runs tests, then provides coverage
          lifecycle dependencies: test
          non-lifecylce depedencies: -instrument
        javadoc
          desc: generate Javadoc for the project
          lifecycle dependencies: init 
          non-lifecycle dependencies: none 
        jar/war/ear
          desc: create a Java archive
          lifecycle dependencies: processResources, test
          non-lifecycle dependencies: none 
        dists
          desc: create a distributable file (jar, war, ear, etc)
          lifecycle dependencies: zip type tasks (jar, war, ear, etc) 
          non-lifecycle dependencies: -war 
        projectReport
          desc: create all reports for the project
          lifecycle dependencies: init
          non-lifecycle dependencies: -coverageReport,
        deploy
          desc: deploy the archive to a jboss instance
          lifecycle dependencies: dists
          non-lifecycle dependencies: none
        undeploy
          desc: undeploy the archive in jboss
          lifecycle dependencies: none
          non-lifecycle dependencies: none 
        restart
          desc: undeploy and redeploy the archive in jboss
          lifecycle dependencies: undeploy,deploy
          non-lifecycle dependencies: none 
  -->

  <!-- Conditionals needed pre-init --> 
  <condition property="build.lib.retrieved" value="true">
    <and>
      <available file="${build.lib.dir}/apache-ivy-${ivy.version}/ivy-${ivy.version}.jar" />
      <available file="${build.lib.dir}/groovy-${groovy.version}/embeddable/groovy-all-${groovy.version}.jar" />
    </and>
  </condition>

  <target name="-retrieveGroovy" unless="build.lib.retrieved"> 
    <mkdir dir="${build.lib.dir}" /> 
    <get src="http://dist.groovy.codehaus.org/distributions/groovy-binary-${groovy.version}.zip"
      dest="${build.lib.dir}/groovy-binary-${groovy.version}.zip" verbose="true" />
    <unzip src="${build.lib.dir}/groovy-binary-${groovy.version}.zip" dest="${build.lib.dir}" />
  </target>

  <target name="-retrieveIvy" unless="build.lib.retrieved"> 
    <!-- Retrieve Ivy --> 
    <get src="http://www.apache.org/dist/ant/ivy/${ivy.version}/${ivy.file}"
      dest="${build.lib.dir}/${ivy.file}" verbose="true" />
    <untar src="${build.lib.dir}/${ivy.file}" dest="${build.lib.dir}/" compression="gzip" />

    <delete includeEmptyDirs="true">
      <fileset dir="${build.lib.dir}">
        <exclude name="**/ivy-${ivy.version}.jar" />
        <exclude name="**/groovy-all-${groovy.version}.jar" />
      </fileset>
    </delete> 
  </target>

  <target name="init" description="setup for the build: taskdef, macrodef, groovy, conditions, etc"
    depends="-retrieveGroovy, -retrieveIvy">
    <mkdir dir="${lib.dir}" />
    <path id="build.lib.classpath">
      <fileset dir="${build.lib.dir}">
        <include name="**/ivy-${ivy.version}.jar" />
        <include name="**/groovy-all-${groovy.version}.jar" />
      </fileset>
    </path>

    <patternset id="hot.classes">
      <!-- fill out any includes for this patternset to be hot deployed -->
    </patternset>

    <condition property="libs.retrieved" value="true">
      <and>
        <available file="${lib.dir}/compile" />
        <available file="${lib.dir}/runtime" />
        <available file="${lib.dir}/test" />
      </and>
    </condition>

    <!-- Load up the task defs -->
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="build.lib.classpath"/>
    <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="build.lib.classpath"/>
    <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="build.lib.classpath"/>
    <taskdef name="groovydoc" classname="org.codehaus.groovy.ant.Groovydoc" classpathref="build.lib.classpath"/>
  </target> 

  <target name="clean" description="clean-up from a previous build">
    <delete dir="${build.dir}" />
  </target>

  <target name="processResources" description="copy resources, performing any needed replacements / filters">
    <mkdir dir="${classes.dir}" /> 
    <mkdir dir="${dist.dir}" /> 
    <copy todir="${classes.dir}">
      <filterchain>
        <expandproperties />
      </filterchain>
      <fileset dir="${resource.dirs}">
        <exclude name="**/*-ds.xml" /> <!-- Data set files need to be handled differentely -->
        <exclude name="**/application.xml" />
        <exclude name="**/jboss-app.xml"/>
      </fileset>
    </copy>
    <!-- Here is where we worry about Datasource files -->
    <copy todir="${dist.dir}" flatten="true">
      <filterchain>
        <expandproperties />
      </filterchain>
      <fileset dir="${resource.dirs}">
        <include name="**/*-ds.xml" />
      </fileset>
    </copy>
    <!-- You may want to handle some of the other files differently here as well like application.xml -->
    <copy todir="${build.dir}/ear-resources" flatten="true">
      <filterchain>
        <expandproperties />
      </filterchain>
      <fileset dir="${resource.dirs}">
        <include name="**/application.xml" />
        <include name="**/jboss-app.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="processTestResources" description="copy test resources, performing any needed replacements / filters">
    <mkdir dir="${test.classes.dir}" /> 
    <copy todir="${test.classes.dir}">
      <filterchain>
        <expandproperties />
      </filterchain>
      <fileset dir="${resource.dirs}" />
    </copy>
  </target>

  <target name="-retrieveLibs" unless="libs.retrieved">
    <ivy:settings file="${basedir}/ivysettings.xml" />
    <ivy:resolve file="${basedir}/ivy.xml" conf="*" log="download-only" />
    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="compile"/> 
    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="runtime"/> 
    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision]-[type]s.[ext]" conf="sources"/> 
    <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test"/> 
  </target>

  <target name="libs" description="fetch all needed libraries using Ivy" depends="init, -retrieveLibs">
    <path id="compile.classpath">
      <fileset dir="${lib.dir}/compile">
        <include name="**/*.jar" />
      </fileset>
    </path>
    <path id="runtime.path">
      <fileset dir="${lib.dir}/runtime">
        <include name="**/*.jar" />
      </fileset>
    </path>
    <path id="test.classpath">
      <fileset dir="${lib.dir}/test">
        <include name="**/*.jar" />
      </fileset>
      <path refid="runtime.path" />
      <path refid="compile.classpath" />
    </path>
  </target>

  <target name="compile" description="compile groovy / Java code" depends="libs, processResources">
    <groovyc srcdir="${src.dirs}" destdir="${classes.dir}">
      <classpath>
        <path refid="compile.classpath" />
      </classpath>
      <javac source="${javac.source}" target="${javac.target}" debug="${javac.debug}" />
    </groovyc>

    <!-- Copy over anything else in the src directories like properties, xml, etc -->
    <copy todir="${classes.dir}">
      <fileset dir="${java.src.dir}" excludes="**/*.java" />
      <fileset dir="${groovy.src.dir}" excludes="**/*.groovy" />
    </copy>
  </target>

  <target name="compileTests" description="compile groovy / Java code" depends="compile">
    <mkdir dir="${test.classes.dir}" />
    <taskdef resource="testngtasks" classpathref="test.classpath" />

    <groovyc srcdir="${test.src.dirs}" destdir="${test.classes.dir}">
      <classpath>
        <path refid="test.classpath" />
      </classpath>
      <javac source="${javac.source}" target="${javac.target}" debug="${javac.debug}" />
    </groovyc>

    <!-- Copy over anything else in the src directories like properties, xml, etc -->
    <copy todir="${classes.dir}">
      <fileset dir="${java.src.dir}" excludes="**/*.java" />
      <fileset dir="${groovy.src.dir}" excludes="**/*.groovy" />
    </copy>
  </target>

  <target name="test" description="run tests" depends="compileTests, processTestResources"> 
    <groovy>
      ant.sequential {
        testng(suitename: properties['ant.project.name'], outputdir: properties['test.output.dir'],  haltonfailure: true) {
          // Maybe use the XML file, not sure yet
          classfileset dir: properties['test.classes.dir'], includes: '**/*.class'
          if (properties['running.coverage']) 
            sysproperty key: 'net.sourceforge.cobertura.datafile', file: properties['instrument.classes.dir'] + '/cobertura.ser'

          classpath { 
            if (properties['running.coverage'])
              pathelement location: properties["instrument.classes.dir"]

            path refid: 'test.classpath'
            pathelement location: properties['test.classes.dir']
            pathelement location: properties['webapp.dir'] + '/WEB-INF'
            pathelement location: properties['webapp.dir'] + '/WEB-INF/classes'

            pathelement location: properties["classes.dir"] 
          } 
        }
      }
    </groovy> 
  </target>

  <target name="-instrument" depends="compile">
    <mkdir dir="${instrument.classes.dir}" />
    <delete file="${instrument.classes.dir}/cobertura.ser" />

    <taskdef resource="tasks.properties" classpathref="test.classpath" /> 

    <cobertura-instrument todir="${instrument.classes.dir}" datafile="${instrument.classes.dir}/cobertura.ser">
      <fileset dir="${classes.dir}">
        <include name="**/*.*" />
      </fileset>
    </cobertura-instrument>

    <!-- Adding the marker for Seam to pick up these classes for testing -->
    <touch file="${instrument.classes.dir}/seam.properties" /> 

    <!-- I think we need to delete the other one so Seam doesn't pick them up too -->
    <delete file="${classes.dir}/seam.properties" /> 

    <property name="running.coverage" value="true" /> 
  </target>

  <target name="test-coverage" description="Runs tests, then provides coverage" depends="-instrument, test">
    <property name="coverage.run" value="true" />
  </target>

  <target name="javadoc" description="generate Javadoc for the project" depends="init"> 
    <mkdir dir="${javadoc.dir}" />
    <mkdir dir="${groovydoc.dir}" />
    <javadoc destdir="${javadoc.dir}" access="${javadoc.access}" 
      source="${ant.build.javac.sourc}">
      <fileset dir="${java.src.dir}" includes="**/*.java" />
    </javadoc>
    <groovydoc sourcepath="${groovy.src.dir}" destdir="${groovydoc.dir}" private="${groovydoc.private}" />
  </target>

  <target name="-jar" depends="compile">
    <jar destfile="${dist.dir}/${ant.project.name}.jar">
      <metainf dir="${classes.dir}/META-INF">
        <include name="**/ejb-jar.xml" />
        <include name="**/orm.xml" />
        <include name="**/standard-jaxws-endpoint-config.xml" /> 
        <include name="**/persistence.xml" /> 
      </metainf>
      <fileset dir="${classes.dir}">
        <!-- Includes for the EJB Jar -->
        <include name="**/ejb/**" />
        <include name="**/entity/**" />
      </fileset>
    </jar>
  </target>

  <target name="-war" depends="-jar">
    <war destfile="${dist.dir}/${ant.project.name}.war" webxml="${webapp.dir}/WEB-INF/web.xml" duplicate="fail">
      <lib dir="${lib.dir}/runtime">
        <include name="**/commons-beanutils.jar" />
        <include name="**/jboss-seam-*.jar" />
      </lib>
      <classes dir="${classes.dir}">
        <!-- exclude clasess that need to be jarred and placed in the ear -->
        <exclude name="**/ejb/**" />
      </classes>
      <fileset dir="${webapp.dir}">
        <exclude name="**/web.xml" />
      </fileset>
    </war>
  </target>

  <target name="-ear" depends="-war">
    <ear destfile="${dist.dir}/${ant.project.name}.ear" appxml="${build.dir}/ear-resources/application.xml">
      <fileset dir="${lib.dir}/runtime">
        <!-- Include jars that need to go into the ear (or exclude jars from the war) -->
        <exclude name="**/commons-beanutils.jar" />
        <exclude name="**/jboss-seam-*.jar" /> 
      </fileset>
      <fileset dir="${dist.dir}">
        <include name="**/*.jar" />
        <include name="**/*.war" />
      </fileset>
      <fileset dir="${build.dir}/ear-resources">
        <include name="**/jboss-app.xml"/> 
      </fileset>
    </ear>
  </target>

  <target name="dists" description="create a distributable file" depends="-ear" />

  <target name="-coverageReport" if="coverage.run">
    <cobertura-report destdir="${reports.dir}/coverage" datafile="${instrument.classes.dir}/cobertura.ser">
      <fileset dir="${java.src.dir}" includes="**/*.java" />
    </cobertura-report>
  </target>

  <target name="projectReport" description="create all reports for the project (expected to be run after coverage)"
    depends="-coverageReport" /> 

  <target name="deploy" description="deploy the archive to a jboss instance">
    <copy todir="${jboss.location}/server/${jboss.server}/deploy" file="${dist.dir}/${ant.project.name}.ear" />
    <copy todir="${jboss.location}/server/${jboss.server}/deploy">
      <fileset dir="${dist.dir}" includes="**/*-ds.xml" />
    </copy>
  </target>

  <target name="undeploy" description="undeploy the archive in jboss">
    <delete file="${jboss.location}/server/${jboss.server}/deploy/${ant.project.name}.ear" />
    <!-- Remove your datasource
    <delete file="${jboss.location}/server/${jboss.server}/deploy/<your datasource name>-ds.xml" />
    --> 
  </target>

  <target name="restart" description="undeploy and redeploy the archive in jboss" depends="undeploy, deploy" />
</project>
